//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Asset Demo/Scripts/ExitInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ExitInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ExitInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ExitInput"",
    ""maps"": [
        {
            ""name"": ""Exit"",
            ""id"": ""ab69ebfc-ed1f-4906-a88c-2c7462048b34"",
            ""actions"": [
                {
                    ""name"": ""Exited"",
                    ""type"": ""Button"",
                    ""id"": ""7772eff5-8e21-4536-b6a1-260fff41b282"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8542459-7f8b-48ff-906f-1c99719326fb"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exited"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StartAnime"",
            ""id"": ""be2e4b29-b5f4-40f1-823f-23b0560a4ce7"",
            ""actions"": [
                {
                    ""name"": ""Gun"",
                    ""type"": ""Button"",
                    ""id"": ""09018066-6c45-4843-aa84-a5c63332fbf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bf83a21-88dd-4884-b204-fc8bc2e540a7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Exit
        m_Exit = asset.FindActionMap("Exit", throwIfNotFound: true);
        m_Exit_Exited = m_Exit.FindAction("Exited", throwIfNotFound: true);
        // StartAnime
        m_StartAnime = asset.FindActionMap("StartAnime", throwIfNotFound: true);
        m_StartAnime_Gun = m_StartAnime.FindAction("Gun", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Exit
    private readonly InputActionMap m_Exit;
    private List<IExitActions> m_ExitActionsCallbackInterfaces = new List<IExitActions>();
    private readonly InputAction m_Exit_Exited;
    public struct ExitActions
    {
        private @ExitInput m_Wrapper;
        public ExitActions(@ExitInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exited => m_Wrapper.m_Exit_Exited;
        public InputActionMap Get() { return m_Wrapper.m_Exit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExitActions set) { return set.Get(); }
        public void AddCallbacks(IExitActions instance)
        {
            if (instance == null || m_Wrapper.m_ExitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExitActionsCallbackInterfaces.Add(instance);
            @Exited.started += instance.OnExited;
            @Exited.performed += instance.OnExited;
            @Exited.canceled += instance.OnExited;
        }

        private void UnregisterCallbacks(IExitActions instance)
        {
            @Exited.started -= instance.OnExited;
            @Exited.performed -= instance.OnExited;
            @Exited.canceled -= instance.OnExited;
        }

        public void RemoveCallbacks(IExitActions instance)
        {
            if (m_Wrapper.m_ExitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExitActions instance)
        {
            foreach (var item in m_Wrapper.m_ExitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExitActions @Exit => new ExitActions(this);

    // StartAnime
    private readonly InputActionMap m_StartAnime;
    private List<IStartAnimeActions> m_StartAnimeActionsCallbackInterfaces = new List<IStartAnimeActions>();
    private readonly InputAction m_StartAnime_Gun;
    public struct StartAnimeActions
    {
        private @ExitInput m_Wrapper;
        public StartAnimeActions(@ExitInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gun => m_Wrapper.m_StartAnime_Gun;
        public InputActionMap Get() { return m_Wrapper.m_StartAnime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartAnimeActions set) { return set.Get(); }
        public void AddCallbacks(IStartAnimeActions instance)
        {
            if (instance == null || m_Wrapper.m_StartAnimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StartAnimeActionsCallbackInterfaces.Add(instance);
            @Gun.started += instance.OnGun;
            @Gun.performed += instance.OnGun;
            @Gun.canceled += instance.OnGun;
        }

        private void UnregisterCallbacks(IStartAnimeActions instance)
        {
            @Gun.started -= instance.OnGun;
            @Gun.performed -= instance.OnGun;
            @Gun.canceled -= instance.OnGun;
        }

        public void RemoveCallbacks(IStartAnimeActions instance)
        {
            if (m_Wrapper.m_StartAnimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStartAnimeActions instance)
        {
            foreach (var item in m_Wrapper.m_StartAnimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StartAnimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StartAnimeActions @StartAnime => new StartAnimeActions(this);
    public interface IExitActions
    {
        void OnExited(InputAction.CallbackContext context);
    }
    public interface IStartAnimeActions
    {
        void OnGun(InputAction.CallbackContext context);
    }
}
