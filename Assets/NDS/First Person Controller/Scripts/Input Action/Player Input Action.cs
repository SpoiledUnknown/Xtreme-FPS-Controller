//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NDS/First Person Controller/Scripts/Input Action/Player Input Action.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace NDS.PlayerInput
{
    public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input Action"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b7e53f96-b4c9-49c6-8295-a9edf7293c68"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""9b333012-d750-4346-a018-597c5477f428"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""f9890052-e387-4c83-826d-56c8b691ccc6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintTap"",
                    ""type"": ""Button"",
                    ""id"": ""9354afc8-3ad0-4df9-b3a7-36b1274135ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintHold"",
                    ""type"": ""Button"",
                    ""id"": ""6d690377-3c95-409d-96d7-20b9f099a0a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""909612d3-80c6-4431-a75e-a3ab713cc29c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchTap"",
                    ""type"": ""Button"",
                    ""id"": ""fd315f53-0531-4fac-93a6-027a8bf5ad9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchHold"",
                    ""type"": ""Button"",
                    ""id"": ""c512a023-60d1-41ef-a0bf-6a7a2027b336"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomTap"",
                    ""type"": ""Button"",
                    ""id"": ""801c11e0-658d-45c9-a165-ad7317f43d3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomHold"",
                    ""type"": ""Button"",
                    ""id"": ""69606d3f-e6bd-4c58-a85c-8b048354334b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a80abb57-b08e-4501-b4c6-49a2043cb100"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60211417-72f5-4138-a796-376f6248f76c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e6eb318c-abc6-4916-9b68-dbc42d942932"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b0f945e-1999-4391-829d-1153bd28125a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b950627-29ec-402d-998b-964c4eebaf90"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""46b192a7-6997-4d6a-9338-d00449801fd5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""138c1ce3-9c07-4b73-b40d-f96aeff8bd4d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""62206348-2e06-4b4b-bdd1-7d6d63439133"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""912d6122-4a85-4210-a705-ec8669e3fac2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ee0df330-9665-4686-92db-af783342c373"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""45871002-914d-4cff-b55b-477dc8bcee76"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c6c4cfd-456c-4e4c-b43f-46f99bbeea52"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50ed5279-13d6-4480-9340-fd559dc5b18e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""087078ae-0da4-41f6-a26f-1a666fa63040"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""SprintTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46889e81-e05d-4cca-9872-fb3bfb33bec8"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""SprintTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1afb6ae5-c214-493a-ae77-691d3af34e9e"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SprintTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bfda9e3-7cef-4b31-a84a-bdfb024cb1ec"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ff3397c-1376-4995-b59d-dc7a371b005b"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eddf6d6e-8259-4177-9c6f-dbeae57039b2"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""CrouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f04d69c-9299-4efd-ba1c-de363c9204eb"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CrouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a71fc19b-8a68-4147-a0b6-541bec5258dc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""ZoomTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1def02e-5f6d-48c4-9d39-911e112f9e1d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ZoomTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""745ce954-efd9-4cf1-865d-a21d20ef9cd1"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""CrouchHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""019a6164-8d92-4bad-b67c-dd4910f563c2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CrouchHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df2c9cd4-24ca-4bc6-8d91-c216319bcf77"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""SprintHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f0c33a2-fd18-4e94-a789-c47c8e9600e9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""SprintHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c288ae1-5d13-4ae3-b512-c1aee498c12d"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SprintHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af503ccc-034f-4580-a904-0bf2d6a5a297"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""ZoomHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47adce44-6055-4166-85dc-2f017415fcac"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ZoomHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shooting"",
            ""id"": ""022e0b28-fcdf-4b2c-96bd-8fff149a4131"",
            ""actions"": [
                {
                    ""name"": ""FireHold"",
                    ""type"": ""Button"",
                    ""id"": ""be6a9684-d3f0-428c-997a-c6ee7f7b7122"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireTap"",
                    ""type"": ""Button"",
                    ""id"": ""fb562101-0adb-46d1-b29d-33cad700d74a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""61cb2efb-9850-43ba-b057-46b7a4592aed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADSHold"",
                    ""type"": ""Button"",
                    ""id"": ""af83cab6-c6ba-40d1-8938-d7e9ed178e7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADSTap"",
                    ""type"": ""Button"",
                    ""id"": ""39a835ea-30f2-4046-9532-60f44c77919e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6998700f-970a-41f6-9f05-3baffa45c1d0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""FireHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8da9dfb-fc45-4964-99ed-318b5d140766"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""FireHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5064b844-7ef4-4265-9946-4dbaa1e69c5e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aaac2d1a-6ee2-4ca8-8680-4a864bb95bdf"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deab815d-10a4-44ae-b302-2fc0082d4f85"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""ADSHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""265e61ba-7f4f-4c6d-841f-34e631c10ff5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ADSHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""198090eb-f61c-4ef3-afe4-33b847443790"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""FireTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0aedd4d-9144-41b0-ac49-b44e445ef9c1"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""FireTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bbeacd1-5ae7-40b0-8643-9517dabf1ed3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""ADSTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""419a6ba8-b2c7-488c-9672-11e7bf3f94ab"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ADSTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard And Mouse"",
            ""bindingGroup"": ""Keyboard And Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": []
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movements = m_Player.FindAction("Movements", throwIfNotFound: true);
            m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
            m_Player_SprintTap = m_Player.FindAction("SprintTap", throwIfNotFound: true);
            m_Player_SprintHold = m_Player.FindAction("SprintHold", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_CrouchTap = m_Player.FindAction("CrouchTap", throwIfNotFound: true);
            m_Player_CrouchHold = m_Player.FindAction("CrouchHold", throwIfNotFound: true);
            m_Player_ZoomTap = m_Player.FindAction("ZoomTap", throwIfNotFound: true);
            m_Player_ZoomHold = m_Player.FindAction("ZoomHold", throwIfNotFound: true);
            // Shooting
            m_Shooting = asset.FindActionMap("Shooting", throwIfNotFound: true);
            m_Shooting_FireHold = m_Shooting.FindAction("FireHold", throwIfNotFound: true);
            m_Shooting_FireTap = m_Shooting.FindAction("FireTap", throwIfNotFound: true);
            m_Shooting_Reload = m_Shooting.FindAction("Reload", throwIfNotFound: true);
            m_Shooting_ADSHold = m_Shooting.FindAction("ADSHold", throwIfNotFound: true);
            m_Shooting_ADSTap = m_Shooting.FindAction("ADSTap", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Movements;
        private readonly InputAction m_Player_Look;
        private readonly InputAction m_Player_SprintTap;
        private readonly InputAction m_Player_SprintHold;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_CrouchTap;
        private readonly InputAction m_Player_CrouchHold;
        private readonly InputAction m_Player_ZoomTap;
        private readonly InputAction m_Player_ZoomHold;
        public struct PlayerActions
        {
            private @PlayerInputAction m_Wrapper;
            public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movements => m_Wrapper.m_Player_Movements;
            public InputAction @Look => m_Wrapper.m_Player_Look;
            public InputAction @SprintTap => m_Wrapper.m_Player_SprintTap;
            public InputAction @SprintHold => m_Wrapper.m_Player_SprintHold;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @CrouchTap => m_Wrapper.m_Player_CrouchTap;
            public InputAction @CrouchHold => m_Wrapper.m_Player_CrouchHold;
            public InputAction @ZoomTap => m_Wrapper.m_Player_ZoomTap;
            public InputAction @ZoomHold => m_Wrapper.m_Player_ZoomHold;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Movements.started += instance.OnMovements;
                @Movements.performed += instance.OnMovements;
                @Movements.canceled += instance.OnMovements;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @SprintTap.started += instance.OnSprintTap;
                @SprintTap.performed += instance.OnSprintTap;
                @SprintTap.canceled += instance.OnSprintTap;
                @SprintHold.started += instance.OnSprintHold;
                @SprintHold.performed += instance.OnSprintHold;
                @SprintHold.canceled += instance.OnSprintHold;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @CrouchTap.started += instance.OnCrouchTap;
                @CrouchTap.performed += instance.OnCrouchTap;
                @CrouchTap.canceled += instance.OnCrouchTap;
                @CrouchHold.started += instance.OnCrouchHold;
                @CrouchHold.performed += instance.OnCrouchHold;
                @CrouchHold.canceled += instance.OnCrouchHold;
                @ZoomTap.started += instance.OnZoomTap;
                @ZoomTap.performed += instance.OnZoomTap;
                @ZoomTap.canceled += instance.OnZoomTap;
                @ZoomHold.started += instance.OnZoomHold;
                @ZoomHold.performed += instance.OnZoomHold;
                @ZoomHold.canceled += instance.OnZoomHold;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Movements.started -= instance.OnMovements;
                @Movements.performed -= instance.OnMovements;
                @Movements.canceled -= instance.OnMovements;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @SprintTap.started -= instance.OnSprintTap;
                @SprintTap.performed -= instance.OnSprintTap;
                @SprintTap.canceled -= instance.OnSprintTap;
                @SprintHold.started -= instance.OnSprintHold;
                @SprintHold.performed -= instance.OnSprintHold;
                @SprintHold.canceled -= instance.OnSprintHold;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @CrouchTap.started -= instance.OnCrouchTap;
                @CrouchTap.performed -= instance.OnCrouchTap;
                @CrouchTap.canceled -= instance.OnCrouchTap;
                @CrouchHold.started -= instance.OnCrouchHold;
                @CrouchHold.performed -= instance.OnCrouchHold;
                @CrouchHold.canceled -= instance.OnCrouchHold;
                @ZoomTap.started -= instance.OnZoomTap;
                @ZoomTap.performed -= instance.OnZoomTap;
                @ZoomTap.canceled -= instance.OnZoomTap;
                @ZoomHold.started -= instance.OnZoomHold;
                @ZoomHold.performed -= instance.OnZoomHold;
                @ZoomHold.canceled -= instance.OnZoomHold;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Shooting
        private readonly InputActionMap m_Shooting;
        private List<IShootingActions> m_ShootingActionsCallbackInterfaces = new List<IShootingActions>();
        private readonly InputAction m_Shooting_FireHold;
        private readonly InputAction m_Shooting_FireTap;
        private readonly InputAction m_Shooting_Reload;
        private readonly InputAction m_Shooting_ADSHold;
        private readonly InputAction m_Shooting_ADSTap;
        public struct ShootingActions
        {
            private @PlayerInputAction m_Wrapper;
            public ShootingActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @FireHold => m_Wrapper.m_Shooting_FireHold;
            public InputAction @FireTap => m_Wrapper.m_Shooting_FireTap;
            public InputAction @Reload => m_Wrapper.m_Shooting_Reload;
            public InputAction @ADSHold => m_Wrapper.m_Shooting_ADSHold;
            public InputAction @ADSTap => m_Wrapper.m_Shooting_ADSTap;
            public InputActionMap Get() { return m_Wrapper.m_Shooting; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShootingActions set) { return set.Get(); }
            public void AddCallbacks(IShootingActions instance)
            {
                if (instance == null || m_Wrapper.m_ShootingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShootingActionsCallbackInterfaces.Add(instance);
                @FireHold.started += instance.OnFireHold;
                @FireHold.performed += instance.OnFireHold;
                @FireHold.canceled += instance.OnFireHold;
                @FireTap.started += instance.OnFireTap;
                @FireTap.performed += instance.OnFireTap;
                @FireTap.canceled += instance.OnFireTap;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @ADSHold.started += instance.OnADSHold;
                @ADSHold.performed += instance.OnADSHold;
                @ADSHold.canceled += instance.OnADSHold;
                @ADSTap.started += instance.OnADSTap;
                @ADSTap.performed += instance.OnADSTap;
                @ADSTap.canceled += instance.OnADSTap;
            }

            private void UnregisterCallbacks(IShootingActions instance)
            {
                @FireHold.started -= instance.OnFireHold;
                @FireHold.performed -= instance.OnFireHold;
                @FireHold.canceled -= instance.OnFireHold;
                @FireTap.started -= instance.OnFireTap;
                @FireTap.performed -= instance.OnFireTap;
                @FireTap.canceled -= instance.OnFireTap;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @ADSHold.started -= instance.OnADSHold;
                @ADSHold.performed -= instance.OnADSHold;
                @ADSHold.canceled -= instance.OnADSHold;
                @ADSTap.started -= instance.OnADSTap;
                @ADSTap.performed -= instance.OnADSTap;
                @ADSTap.canceled -= instance.OnADSTap;
            }

            public void RemoveCallbacks(IShootingActions instance)
            {
                if (m_Wrapper.m_ShootingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShootingActions instance)
            {
                foreach (var item in m_Wrapper.m_ShootingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShootingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShootingActions @Shooting => new ShootingActions(this);
        private int m_KeyboardAndMouseSchemeIndex = -1;
        public InputControlScheme KeyboardAndMouseScheme
        {
            get
            {
                if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard And Mouse");
                return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
            }
        }
        private int m_ControllerSchemeIndex = -1;
        public InputControlScheme ControllerScheme
        {
            get
            {
                if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
                return asset.controlSchemes[m_ControllerSchemeIndex];
            }
        }
        private int m_MobileSchemeIndex = -1;
        public InputControlScheme MobileScheme
        {
            get
            {
                if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
                return asset.controlSchemes[m_MobileSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnMovements(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnSprintTap(InputAction.CallbackContext context);
            void OnSprintHold(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouchTap(InputAction.CallbackContext context);
            void OnCrouchHold(InputAction.CallbackContext context);
            void OnZoomTap(InputAction.CallbackContext context);
            void OnZoomHold(InputAction.CallbackContext context);
        }
        public interface IShootingActions
        {
            void OnFireHold(InputAction.CallbackContext context);
            void OnFireTap(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnADSHold(InputAction.CallbackContext context);
            void OnADSTap(InputAction.CallbackContext context);
        }
    }
}
